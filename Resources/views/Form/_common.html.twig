{{ curiousFileUploadClearCache(form.vars.objectId) }}

{%- trans_default_domain form.vars.translation_domain|default('messages') -%}

{# Autodetect multiple #}
{% if 'autodetect' == multiple|default('autodetect') %}
  {% set multiple = curiousFileUploadAutodetectMultiple(form.parent.vars.value, form.vars.name) %}
{% endif %}

{% if multiple == false %}
  {% set maxFiles = 1 %}
{% endif %}

{% if maxFiles is defined %}
  {%- set object = attribute(form.parent.vars.value, form.vars.name) -%}
  {%- set simple = (object.getPath is defined) -%}
  <script>
    {% if form.vars.type == 'crop' %}
    jQuery.getScript("{{ asset('bundles/curiousincfileuploadformtype/js/cropper.min.js') }}").done(
    {% endif %}
    jQuery.getScript("{{ asset('bundles/curiousincfileuploadformtype/js/dropzone.js') }}",
      function() {
        Dropzone.autoDiscover = false;
        var form = $('[name={{ form.parent.vars.name }}]').length > 0 ? $('[name={{ form.parent.vars.name }}]') : $('body > div.wrapper > div > section.content > div > form');
        var input = $("<input>")
          .attr("type", "hidden")
          .attr("name", "entity_id").val("{{ form.parent.vars.value.id }}");
        form.append($(input));

        {# Dropzone field #}
        {{ form.vars.id }} = $('#{{ form.vars.id }}').dropzone(
          {
            acceptedFiles: "{{ acceptedFiles|default('.jpeg,.jpg,.png,.gif,.JPEG,.JPG,.PNG,.GIF') }}",//"audio/*,image/*,.psd,.pdf"
            maxFiles: "{{ maxFiles }}",
            maxFilesize: "{{ maxFileSize }}",
            addRemoveLinks: true,
            dictDefaultMessage: "{{ uploaderText|trans }}",
            dictRemoveFile: 'Delete',
            dictRemoveFileConfirmation: 'Do you want to delete file?',
            previewTemplate: "<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-image\"><img width=\"120px\" height=\"120px\" data-dz-thumbnail /></div>\n  <div class=\"dz-details\">\n    <div class=\"dz-size\"><span data-dz-size></span></div>\n    <div class=\"dz-filename\"><span data-dz-name></span></div>\n  </div>\n  <div class=\"dz-progress\"><span class=\"dz-upload\" data-dz-uploadprogress></span></div>\n  <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n  <div class=\"dz-success-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n      <title>Check</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <path d=\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" stroke-opacity=\"0.198794158\" stroke=\"#747474\" fill-opacity=\"0.816519475\" fill=\"#FFFFFF\" sketch:type=\"MSShapeGroup\"></path>\n      </g>\n    </svg>\n  </div>\n  <div class=\"dz-error-mark\">\n    <svg width=\"54px\" height=\"54px\" viewBox=\"0 0 54 54\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n      <title>Error</title>\n      <defs></defs>\n      <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <g id=\"Check-+-Oval-2\" sketch:type=\"MSLayerGroup\" stroke=\"#747474\" stroke-opacity=\"0.198794158\" fill=\"#FFFFFF\" fill-opacity=\"0.816519475\">\n          <path d=\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\" id=\"Oval-2\" sketch:type=\"MSShapeGroup\"></path>\n        </g>\n      </g>\n    </svg>\n  </div>\n</div>",
            init: function() {
              var $this = this;

              {% if multiple == false %}
              this.on("addedfile", function(file) {

                {# Set removeName for last added file #}
                if (typeof uniqueId !== 'undefined') {
                  this.files[this.files.length - 1].removeName = uniqueId;
                } else {
                  this.files[this.files.length - 1].removeName = this.files[this.files.length - 1].name;
                }

                {# Make sure to only have one file #}
                if (this.files[1] != null) {
                  if (undefined === this.files[0].id) {
                    {# First file is not persisted, delete it to make room #}
                    this.removeFile(this.files[0]);
                  } else {
                    {% if deletingAllowed %}
                      {# First file is persisted, but it will be deleted #}
                      this.removeFile(this.files[0]);
                    {% else %}
                      {# First file is persisted, delete the last uploaded file instead #}
                      this.removeFile(this.files[this.files.length - 1]);
                      alert('Can not upload a new file, changing already saved files is not allowed.');
                    {% endif %}
                  }
                }
              });
              {% else %}
              this.on("addedfile", function(file) {
                if (this.files[{{ maxFiles }}] != null) {
                  this.removeFile(this.files[0]);
                }
                if (typeof uniqueId !== 'undefined') {
                  file.removeName = uniqueId;
                } else {
                  file.removeName = file.name;
                }
              });
              {% endif %}

              this.on("sending", function(file, request, formData) {
                uniqueId = '{{ curiousFileUploadTypeOf(form.parent.vars.data) }}'
                            + '_{{ form.vars.name }}'
                            + '_' + '{{ form.vars.objectId }}'
                            + '.' + file.name.split('.').pop();

                if (typeof file.previousAdded === 'undefined' || !file.previousAdded) {
                  file.name = uniqueId;
                  file.removeName = uniqueId;
                }
                formData.append('uniqueFileName', uniqueId);
              });

              this.on("removedfile", function(file) {
                {# Call delete on File-API, to delete temporary or persisted file, where allowed #}
                var deletingAllowed = {{ deletingAllowed ? 'true' : 'false' }};
                if (!file.id) {
                  {# Always delete temporary files, a mistake in uploading is assumed #}
                  $.post('{{ path('curious_file_upload_delete_temporary') }}', { name: file.removeName });
                } else {
                  {# File is persisted #}
                  if (deletingAllowed) {
                    {# Delete the persisted file if allowed #}
                    $.post('{{ path('curious_file_upload_delete_persisted') }}', {
                      id: file.id,
                      sourceEntity: '{{ mapping.sourceEntity|escape('js') }}',
                      sourceEntityId: '{{ form.parent.vars.data.id|escape('js') }}',
                      fieldName: '{{ form.vars.name|escape('js') }}',
                      targetEntity: '{{ mapping.targetEntity|escape('js') }}',
                    });
                  } else {
                    {# Restore the preview element, since deleting persisted files is not allowed #}
                    $this.element.classList.add("dz-started");
                    $this.files.unshift(file);
                    $this.previewsContainer.insertBefore(file.previewElement, $this.previewsContainer.childNodes[1]);
                    clearTimeout(this.upcomingAlert);
                    this.upcomingAlert = setTimeout(function() {
                      alert('One or more files could not be removed, because it is disallowed.');
                    }, 20);
                  }
                }
              });

              var fileUrl = [];

              {% if object is defined and object is not null and not simple %}
              {# Object contains multiple files #}

              {% for file in object %}
              var mockFile = {
                name: "{{ file.name }}",
                size: {{ file.size }},
                type: 'image/jpeg',
                id: '{{ file.id }}',
                previousAdded: true,
                accepted: true,
              };

              {# Call the Dropzone addedfile event handler #}
              this.options.addedfile.call(this, mockFile);

              {# Load thumbnails #}
              this.createThumbnailFromUrl(mockFile, "{{ asset(file.path) }}");

              {# Register file #}
              this.files.push(mockFile);

              {# Mark the upload as complete to remove progress bar #}
              this.options.complete.call(this, mockFile);

              {# get fileUrl inside onthumbnail function #}
              fileUrl['{{ file.name }}'] = '{{ asset(file.path) }}';

              {% endfor %}

              {% elseif object is defined and object is not null and simple %}
              {# Object equals single file #}
              {% set file = object %}
              var mockFile = {
                name: "{{ file.name }}",
                size: 12345,
                type: 'image/jpeg',
                id: '{{ file.id }}',
                previousAdded: true,
                accepted: true,
              };

              {# Call the Dropzone addedfile event handler #}
              this.options.addedfile.call(this, mockFile);

              {# Register file #}
              this.files.push(mockFile);

              {# Load thumbnails #}
              this.createThumbnailFromUrl(mockFile, "{{ asset(file.path) }}");

              {# Mark the upload as complete to remove progress bar #}
              this.options.complete.call(this, mockFile);
              {% endif %}
              {% if form.vars.type == 'crop' %}
              var dataURItoBlob = function(dataURI) {
                var byteString = atob(dataURI.split(',')[1]);
                var ab = new ArrayBuffer(byteString.length);
                var ia = new Uint8Array(ab);
                for (var i = 0; i < byteString.length; i++) {
                  ia[i] = byteString.charCodeAt(i);
                }
                return new Blob([ab], { type: 'image/jpeg' });
              };
              var c = 0;

              this.on('success', function(file) {
                var reader = new FileReader();
                reader.onloadend = function () {
                  var $button = $('<a href="#" class="js-open-cropper-modal" data-file-name="' + reader.result + '" data-orig-file-name="' + file.name + '">Open</a>');
                  $(file.previewElement).append($button);
                };
                reader.readAsDataURL(file);
              });

              this.on('thumbnail', function(file, dataUrl) {
                if (fileUrl[file.name] !== undefined) {
                  var $button = $('<a href="#" class="js-open-cropper-modal" data-file-name="' + fileUrl[file.name] + '" data-orig-file-name="' + file.name + '">Open</a>');
                  $(file.previewElement).append($button);
                }
              });

              $('#{{ form.vars.id }}').on('click', '.js-open-cropper-modal', function(e) {
                e.preventDefault();
                var fileName = $(this).data('file-name');
                var origFileName = $(this).data('orig-file-name');
                var url = fileName;
                var modalTemplate =
                      '<div id="cropper-modal" class="modal fade" tabindex="-1" role="dialog">' +
                      '<div class="modal-dialog modal-lg" role="document">' +
                      '<div class="modal-content">' +
                      '<div class="modal-header">' +
                      '<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>' +
                      '<h4 class="modal-title">Crop</h4>' +
                      '</div>' +
                      '<div class="modal-body">' +
                      '<div class="image-container">' +
                      '<img id="{{ form.vars.name }}-img-' + ++c + '" src="' + url + '">' +
                      '</div>' +
                      '</div>' +
                      '<div class="modal-footer">' +
                      '<button type="button" class="btn btn-warning rotate-left"><span class="fa fa-rotate-left"></span></button>' +
                      '<button type="button" class="btn btn-warning rotate-right"><span class="fa fa-rotate-right"></span></button>' +
                      '<button type="button" class="btn btn-warning scale-x" data-value="-1"><span class="fa fa-arrows-h"></span></button>' +
                      '<button type="button" class="btn btn-warning scale-y" data-value="-1"><span class="fa fa-arrows-v"></span></button>' +
                      '<button type="button" class="btn btn-warning reset"><span class="fa fa-refresh"></span></button>' +
                      '<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>' +
                      '<button type="button" class="btn btn-primary crop-upload">Open</button>' +
                      '</div>' +
                      '</div>' +
                      '</div>' +
                      '</div>';

                var $cropperModal = $(modalTemplate);

                $cropperModal.modal('show').on("shown.bs.modal", function() {
                  var cropper = new Cropper(document.getElementById('{{ form.vars.name }}-img-' + c), {
                    autoCropArea: 1,
                    movable: false,
                    cropBoxResizable: true,
                    rotatable: true,
                  });
                  var $this = $(this);
                  $this
                    .on('click', '.crop-upload', function() {
                      {# Get cropped image data #}
                      var blob = cropper.getCroppedCanvas().toDataURL();
                      {# Transform it to Blob object #}
                      var croppedFile = dataURItoBlob(blob);
                      croppedFile.name = origFileName;
                      var dropzone = Dropzone.forElement({{ form.vars.id }}[0]);
                      var files = dropzone.getAcceptedFiles();
                      for (var i = 0; i < files.length; i++) {
                        var file = files[i];
                        if (file.name === origFileName) {
                          dropzone.removeFile(file);
                        }
                      }

                      dropzone.addFile(croppedFile);
                      $this.modal('hide');
                    })
                    .on('click', '.rotate-right', function() {
                      cropper.rotate(90);
                    })
                    .on('click', '.rotate-left', function() {
                      cropper.rotate(-90);
                    })
                    .on('click', '.reset', function() {
                      cropper.reset();
                    })
                    .on('click', '.scale-x', function() {
                      var $this = $(this);
                      cropper.scaleX($this.data('value'));
                      $this.data('value', -$this.data('value'));
                    })
                    .on('click', '.scale-y', function() {
                      var $this = $(this);
                      cropper.scaleY($this.data('value'));
                      $this.data('value', -$this.data('value'));
                    });
                });
              });
              {% endif %}
            },
          }
        );
      })
    {% if form.vars.type == 'crop' %}){% endif %};
  </script>
{% endif %}
